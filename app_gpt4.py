from flask import Flask, request, Response, stream_with_context, jsonify
import json
from dotenv import load_dotenv
import os
import uuid  # For generating unique session IDs
from openai import AzureOpenAI
import tiktoken
from utils.util import *
# from utils.search_local import search_similar_products
from utils.embedding_openai import search_similar_products
import sys

# Load environment variables from .env file
load_dotenv()

# Replace these with your actual values
GPT4_API_KEY = os.getenv("GPT4_API_KEY")
GPT4_ENDPOINT = os.getenv("GPT4_ENDPOINT")
GPT4_DEPLOYMENT_NAME = os.getenv("GPT4_DEPLOYMENT_NAME")
GPT4_API_VERSION = os.getenv("GPT4_API_VERSION")

app = Flask(__name__)



# In-memory storage for chat history (key: ussid, value: list of messages)
chat_history_store = {}

def classify_intent(query):
    """
    Uses GPT-4 to classify the intent of the user's query in Vietnamese.
    
    :param query: The latest query from the user (string).
    :return: 0 for casual chat, 1 for product inquiry.
    """
    # Define the system message for intent classification in Vietnamese
    system_message = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch √Ω ƒë·ªãnh kh√°ch h√†ng cho m·ªôt c·ª≠a h√†ng b√°n l·∫ª gi√†y d√©p v√† ph·ª• ki·ªán (gi√†y da, gi√†y ch·∫°y b·ªô, d√©p, th·∫Øt l∆∞ng,... cho c·∫£ nam v√† n·ªØ). Nhi·ªám v·ª• c·ªßa b·∫°n l√† **ph√¢n lo·∫°i** c√¢u h·ªèi c·ªßa kh√°ch h√†ng th√†nh m·ªôt trong nƒÉm lo·∫°i sau ƒë√¢y, d·ª±a tr√™n √Ω ƒë·ªãnh ch√≠nh c·ªßa h·ªç:

        **Ph√¢n lo·∫°i √Ω ƒë·ªãnh:**

        * **'1'**: **H·ªèi chuy·ªán th√¥ng th∆∞·ªùng (Chit-chat):** C√°c c√¢u h·ªèi mang t√≠nh ch√†o h·ªèi, n√≥i chuy·ªán phi·∫øm, ho·∫∑c kh√¥ng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn s·∫£n ph·∫©m, mua h√†ng, ho·∫∑c ƒë∆°n h√†ng c·ª• th·ªÉ. V√≠ d·ª•: "Ch√†o b·∫°n.", "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?", "B·∫°n kh·ªèe kh√¥ng?".

        * **'2'**: **T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n:** C√°c c√¢u h·ªèi m√† kh√°ch h√†ng ƒëang t√¨m ki·∫øm th√¥ng tin ho·∫∑c s·ª± t·ªìn t·∫°i c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ d·ª±a tr√™n t√™n ho·∫∑c m√¥ t·∫£ s∆° b·ªô. V√≠ d·ª•: "Shop c√≥ b√°n gi√†y sandal nam hai quai ch√©o kh√¥ng?", "T√¥i mu·ªën t√¨m gi√†y da l∆∞·ªùi m√†u n√¢u.", "C·ª≠a h√†ng c√≥ nh·ªØng lo·∫°i gi√†y ch·∫°y b·ªô n√†o?".

        * **'3'**: **H·ªèi th√¥ng tin chung (v·∫≠n chuy·ªÉn, b·∫£o h√†nh,...):** C√°c c√¢u h·ªèi li√™n quan ƒë·∫øn c√°c ch√≠nh s√°ch, quy tr√¨nh chung c·ªßa c·ª≠a h√†ng, kh√¥ng c·ª• th·ªÉ v·ªÅ m·ªôt s·∫£n ph·∫©m ho·∫∑c ƒë∆°n h√†ng n√†o. V√≠ d·ª•: "Th·ªùi gian giao h√†ng m·∫•t bao l√¢u?", "Ch√≠nh s√°ch b·∫£o h√†nh c·ªßa c·ª≠a h√†ng nh∆∞ th·∫ø n√†o?", "C√≥ nh·ªØng ph∆∞∆°ng th·ª©c thanh to√°n n√†o?", "ch√¢n t√¥i d√†i 25cm th√¨ mang size n√†o ?".

        * **'4'**: **Mong mu·ªën ch·ªët ƒë∆°n (Mua h√†ng):** C√°c c√¢u h·ªèi ho·∫∑c tuy√™n b·ªë th·ªÉ hi·ªán √Ω ƒë·ªãnh mua h√†ng, ƒë·∫∑t h√†ng, ho·∫∑c c√°c h√†nh ƒë·ªông li√™n quan ƒë·∫øn vi·ªác ho√†n t·∫•t giao d·ªãch mua s·∫Øm. V√≠ d·ª•: "T√¥i mu·ªën mua ƒë√¥i gi√†y n√†y.", "L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫∑t mua?", "T√¥i mu·ªën thanh to√°n ƒë∆°n h√†ng.", "Cho t√¥i th√™m v√†o gi·ªè h√†ng s·∫£n ph·∫©m ABC.".

        * **'5'**: **Truy xu·∫•t ƒë∆°n h√†ng theo s·ªë ƒëi·ªán tho·∫°i:** C√°c c√¢u h·ªèi m√† kh√°ch h√†ng mu·ªën ki·ªÉm tra tr·∫°ng th√°i ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t b·∫±ng c√°ch cung c·∫•p s·ªë ƒëi·ªán tho·∫°i. V√≠ d·ª•: "T√¥i mu·ªën ki·ªÉm tra ƒë∆°n h√†ng v·ªõi s·ªë ƒëi·ªán tho·∫°i 09xxxxxxx.", "ƒê∆°n h√†ng c·ªßa t√¥i ƒë√£ giao ch∆∞a?", "Th√¥ng tin chi ti·∫øt v·ªÅ ƒë∆°n h√†ng n√†y l√† g√¨?".

        **Y√™u c·∫ßu:**

        Ph√¢n t√≠ch c√¢u h·ªèi c·ªßa kh√°ch h√†ng v√† tr·∫£ v·ªÅ **duy nh·∫•t m·ªôt s·ªë** t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i √Ω ƒë·ªãnh ( '1', '2', '3', '4', ho·∫∑c '5' ). **Kh√¥ng cung c·∫•p b·∫•t k·ª≥ gi·∫£i th√≠ch ho·∫∑c vƒÉn b·∫£n n√†o kh√°c ngo√†i s·ªë ph√¢n lo·∫°i.**

        **V√≠ d·ª•:**

        * **Kh√°ch h√†ng:** "Ch√†o shop bu·ªïi chi·ªÅu!"
            **B·∫°n (LLM):** 1

        * **Kh√°ch h√†ng:** "T√¥i ƒëang t√¨m m·ªôt ƒë√¥i gi√†y th·ªÉ thao m√†u tr·∫Øng."
            **B·∫°n (LLM):** 2

        * **Kh√°ch h√†ng:** "Shop giao h√†ng ƒë·∫øn H√† N·ªôi m·∫•t bao l√¢u?"
            **B·∫°n (LLM):** 3

        * **Kh√°ch h√†ng:** "T√¥i mu·ªën ƒë·∫∑t mua ngay ƒë√¥i gi√†y da m√£ XYZ size 40."
            **B·∫°n (LLM):** 4

        * **Kh√°ch h√†ng:** "Cho t√¥i h·ªèi v·ªÅ ƒë∆°n h√†ng v·ªõi s·ªë ƒëi·ªán tho·∫°i 03xxxxxxx."
            **B·∫°n (LLM):** 5

    """

    # Prepare the messages for GPT-4
    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": query}
    ]

    try:
        # Initialize Azure OpenAI client
        client = AzureOpenAI(
            azure_endpoint=GPT4_ENDPOINT,
            api_key=GPT4_API_KEY,
            api_version=GPT4_API_VERSION,
        )

        # Call GPT-4 to classify the intent
        response = client.chat.completions.create(
            model=GPT4_DEPLOYMENT_NAME,
            messages=messages,
            max_tokens=1,  # Only need a single token for the classification result
            temperature=0.0,  # Use deterministic output
            top_p=1.0,
            frequency_penalty=0,
            presence_penalty=0,
            stop=None
        )

        # Extract the classification result
        classification_result = response.choices[0].message.content.strip()

        # Convert the result to an integer (0 or 1)
        if classification_result in ["1", "2", "3", "4", "5"]:
            return int(classification_result)
        else:
            # Default to casual chat if the result is unexpected
            print(f" üò¢ Result wrong: {classification_result}")
            return 1

    except Exception as e:
        print(f"üòí Error when classification intent of user : {str(e)}")
        return 1  # Default to casual chat in case of errors



@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    ussid = data.get("ussid")  # Unique session ID
    user_input = data.get("prompt", "")

    # Validate ussid
    if not ussid:
        return jsonify({"error": "Session ID (ussid) is required."}), 400

    # Retrieve or initialize chat history for this session
    if ussid not in chat_history_store:
        chat_history_store[ussid] = []

    # Add the user's message to the chat history
    chat_history_store[ussid].append({"role": "user", "content": user_input})

    # Extract the latest query
    latest_query = chat_history_store[ussid][-1]["content"]

    # Classify the intent of the latest query using GPT-4
    intent = classify_intent(latest_query)
    print(" üòÇ intent user ", intent)
    # print("chat_history_store ", chat_history_store)

    # Keep only the latest 10 messages (or 50, depending on your preference)
    chat_history_store[ussid] = chat_history_store[ussid][-10:]


    # chitchat
    if intent==1 or intent==3:
        # Prepare the full chat history to send to the LLM
        system_message = f"""
            B·∫°n l√† chatbot t·ª± ƒë·ªông c√≥ t√™n l√† Hunggg, m·ªôt nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng th√¢n thi·ªán v√† h√≤a ƒë·ªìng t·∫°i c·ª≠a h√†ng Gi√†y BQ. Khi kh√°ch h√†ng ƒë∆∞a ra nh·ªØng c√¢u h·ªèi mang t√≠nh ch√†o h·ªèi, n√≥i chuy·ªán phi·∫øm, ho·∫∑c kh√¥ng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn s·∫£n ph·∫©m da (gi√†y, d√©p, th·∫Øt l∆∞ng, t√∫i x√°ch), mua h√†ng, ho·∫∑c ƒë∆°n h√†ng c·ª• th·ªÉ, nhi·ªám v·ª• c·ªßa b·∫°n l√† ph·∫£n h·ªìi m·ªôt c√°ch l·ªãch s·ª±, duy tr√¨ m·ªôt cu·ªôc tr√≤ chuy·ªán ng·∫Øn g·ªçn v√† th√¢n thi·ªán.

            **H∆∞·ªõng d·∫´n:**

            1.  ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa kh√°ch h√†ng.
            2.  N·∫øu c√¢u h·ªèi thu·ªôc lo·∫°i ch√†o h·ªèi ho·∫∑c n√≥i chuy·ªán phi·∫øm (v√≠ d·ª•: "Ch√†o b·∫°n.", "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?", "B·∫°n kh·ªèe kh√¥ng?"), h√£y ƒë√°p l·∫°i m·ªôt c√°ch l·ªãch s·ª± v√† ng·∫Øn g·ªçn. V√≠ d·ª•: "Ch√†o qu√Ω kh√°ch!", "V√¢ng, th·ªùi ti·∫øt h√¥m nay kh√° ƒë·∫πp ·∫°.", "T√¥i kh·ªèe, c·∫£m ∆°n qu√Ω kh√°ch!".
            3.  B·∫°n c√≥ th·ªÉ h·ªèi m·ªôt c√¢u h·ªèi m·ªü ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán ·ªü m·ª©c ƒë·ªô x√£ giao n·∫øu ph√π h·ª£p, nh∆∞ng tr√°nh ƒëi s√¢u v√†o c√°c ch·ªß ƒë·ªÅ c√° nh√¢n ho·∫∑c kh√¥ng li√™n quan ƒë·∫øn c·ª≠a h√†ng. V√≠ d·ª•: "Qu√Ω kh√°ch c√≥ d·ª± ƒë·ªãnh g√¨ cho ng√†y h√¥m nay kh√¥ng ·∫°?" (n·∫øu ng·ªØ c·∫£nh cho ph√©p).
            4.  H√£y ch√∫ √Ω l·∫Øng nghe n·∫øu kh√°ch h√†ng c√≥ √Ω ƒë·ªãnh chuy·ªÉn sang h·ªèi v·ªÅ s·∫£n ph·∫©m ho·∫∑c d·ªãch v·ª• sau ph·∫ßn ch√†o h·ªèi.
            5.  N·∫øu cu·ªôc tr√≤ chuy·ªán c√≥ v·∫ª kh√¥ng c√≥ m·ª•c ƒë√≠ch c·ª• th·ªÉ v√† k√©o d√†i, b·∫°n c√≥ th·ªÉ k·∫øt th√∫c m·ªôt c√°ch l·ªãch s·ª± b·∫±ng c√°ch h·ªèi: "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ th√™m cho qu√Ω kh√°ch kh√¥ng ·∫°?" ho·∫∑c "N·∫øu qu√Ω kh√°ch c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o kh√°c v·ªÅ s·∫£n ph·∫©m, ƒë·ª´ng ng·∫ßn ng·∫°i cho ch√∫ng t√¥i bi·∫øt nh√©."

            """
        
    # products
    elif intent == 2:
        result_search = search_similar_products(latest_query, top_k=5)
        print("üòÇ result search ", result_search)
        system_message = f"""
            B·∫°n l√† chatbot t·ª± ƒë·ªông c√≥ t√™n l√† Hunggg. B·∫°n l√† m·ªôt nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng chuy√™n nghi·ªáp v√† am hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m gi√†y d√©p v√† ph·ª• ki·ªán c·ªßa c·ª≠a h√†ng Gi√†y BQ. B·∫°n s·∫Ω s·ª≠ d·ª•ng th√¥ng tin ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch.
            **C√¢u h·ªèi c·ªßa kh√°ch h√†ng:** 
            {latest_query}
            **Th√¥ng tin s·∫£n ph·∫©m li√™n quan:** 
            {result_search}
            **H∆∞·ªõng d·∫´n:**

            1.  ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa kh√°ch h√†ng ƒë·ªÉ hi·ªÉu r√µ nhu c·∫ßu c·ªßa h·ªç.
            2.  Xem x√©t c√°c th√¥ng tin v·ªÅ s·∫£n ph·∫©m li√™n quan ƒë∆∞·ª£c cung c·∫•p. C√°c s·∫£n ph·∫©m n√†y c√≥ th·ªÉ t∆∞∆°ng t·ª± ho·∫∑c li√™n quan ƒë·∫øn s·∫£n ph·∫©m m√† kh√°ch h√†ng ƒë·ªÅ c·∫≠p.
            3.  S·ª≠ d·ª•ng th√¥ng tin t·ª´ c√°c s·∫£n ph·∫©m li√™n quan ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch chi ti·∫øt v√† h·ªØu √≠ch nh·∫•t c√≥ th·ªÉ.
            4.  N·∫øu c√¢u h·ªèi c·ªßa kh√°ch h√†ng li√™n quan ƒë·∫øn m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ (v√≠ d·ª•: "AD147"), h√£y ∆∞u ti√™n cung c·∫•p th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± ƒë∆∞·ª£c t√¨m th·∫•y.
            5.  B·∫°n c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ:
                * T√™n s·∫£n ph·∫©m
                * M√¥ t·∫£ ng·∫Øn g·ªçn
                * Ch·∫•t li·ªáu
                * Ki·ªÉu d√°ng
                * M√†u s·∫Øc
                * K√≠ch c·ª° hi·ªán c√≥
                * Gi√° c·∫£
                * C√°c t√≠nh nƒÉng n·ªïi b·∫≠t
                * So s√°nh v·ªõi s·∫£n ph·∫©m m√† kh√°ch h√†ng ƒë√£ h·ªèi (n·∫øu ph√π h·ª£p)
                * G·ª£i √Ω c√°c s·∫£n ph·∫©m ph√π h·ª£p kh√°c d·ª±a tr√™n s·ªü th√≠ch ho·∫∑c nhu c·∫ßu ti·ªÅm nƒÉng c·ªßa kh√°ch h√†ng.
            6.  N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m li√™n quan n√†o ph√π h·ª£p ho·∫∑c th√¥ng tin kh√¥ng ƒë·ªß ƒë·ªÉ tr·∫£ l·ªùi, h√£y tr·∫£ l·ªùi m·ªôt c√°ch l·ªãch s·ª± r·∫±ng b·∫°n c·∫ßn th√™m th√¥ng tin ho·∫∑c s·∫Ω ki·ªÉm tra l·∫°i. Tr√°nh ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c.
            7.  Lu√¥n gi·ªØ th√°i ƒë·ªô l·ªãch s·ª± v√† chuy√™n nghi·ªáp trong su·ªët cu·ªôc tr√≤ chuy·ªán.
            """
    
    elif intent == 30:
        result_search = search_similar_products(latest_query, top_k=5)
        system_message = f"""
            B·∫°n l√† chatbot t·ª± ƒë·ªông c√≥ t√™n l√† Hunggg. B·∫°n l√† m·ªôt nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng chuy√™n nghi·ªáp t·∫°i c·ª≠a h√†ng Gi√†y BQ. Nhi·ªám v·ª• c·ªßa b·∫°n l√† gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc chung c·ªßa kh√°ch h√†ng li√™n quan ƒë·∫øn ch√≠nh s√°ch v√† quy tr√¨nh c·ªßa c·ª≠a h√†ng.

            **Th√¥ng tin v·ªÅ ch√≠nh s√°ch v√† quy tr√¨nh c·ªßa c·ª≠a h√†ng:**
            {result_search}

            **C√¢u h·ªèi c·ªßa kh√°ch h√†ng:**
            {latest_query}

            **H∆∞·ªõng d·∫´n:**

            1.  ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa kh√°ch h√†ng ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i th√¥ng tin chung m√† h·ªç ƒëang t√¨m ki·∫øm (v√≠ d·ª•: v·∫≠n chuy·ªÉn, b·∫£o h√†nh, thanh to√°n, ƒë·ªïi tr·∫£, h∆∞·ªõng d·∫´n ch·ªçn size).
            2.  Tham kh·∫£o ph·∫ßn "Th√¥ng tin v·ªÅ ch√≠nh s√°ch v√† quy tr√¨nh c·ªßa c·ª≠a h√†ng" (`Th√¥ng tin v·ªÅ ch√≠nh s√°ch v√† quy tr√¨nh c·ªßa c·ª≠a h√†ng`) ƒë·ªÉ t√¨m ki·∫øm c√¢u tr·∫£ l·ªùi ph√π h·ª£p.
            3.  Cung c·∫•p c√¢u tr·∫£ l·ªùi chi ti·∫øt, r√µ r√†ng v√† d·ªÖ hi·ªÉu cho kh√°ch h√†ng d·ª±a tr√™n th√¥ng tin ƒë√£ ƒë∆∞·ª£c cung c·∫•p.
            4.  N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn m·ªôt ch·ªß ƒë·ªÅ c·ª• th·ªÉ, h√£y t·∫≠p trung v√†o th√¥ng tin li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ ƒë√≥.
            5.  ƒê·ªëi v·ªõi c√°c c√¢u h·ªèi v·ªÅ k√≠ch c·ª° (v√≠ d·ª•: "ch√¢n t√¥i d√†i 25cm th√¨ mang size n√†o?"), h√£y tham kh·∫£o b·∫£ng quy ƒë·ªïi k√≠ch c·ª° gi√†y c·ªßa c·ª≠a h√†ng (n·∫øu c√≥ trong `Th√¥ng tin v·ªÅ ch√≠nh s√°ch v√† quy tr√¨nh c·ªßa c·ª≠a h√†ng`) v√† ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p.
            6.  N·∫øu th√¥ng tin trong `Th√¥ng tin v·ªÅ ch√≠nh s√°ch v√† quy tr√¨nh c·ªßa c·ª≠a h√†ng` kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c cho c√¢u h·ªèi c·ªßa kh√°ch h√†ng, h√£y tr·∫£ l·ªùi m·ªôt c√°ch l·ªãch s·ª± r·∫±ng b·∫°n c·∫ßn ki·ªÉm tra l·∫°i ho·∫∑c s·∫Ω cung c·∫•p th√¥ng tin sau. Tr√°nh ƒë∆∞a ra th√¥ng tin kh√¥ng ch·∫Øc ch·∫Øn.
            7.  Lu√¥n gi·ªØ th√°i ƒë·ªô l·ªãch s·ª± v√† s·∫µn s√†ng h·ªó tr·ª£ th√™m n·∫øu kh√°ch h√†ng c√≥ th√™m th·∫Øc m·∫Øc.

        """

    # order
    elif intent == 4:
        system_message = f"""
            B·∫°n l√† chatbot t·ª± ƒë·ªông c√≥ t√™n l√† Hunggg. B·∫°n l√† m·ªôt nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng chuy√™n nghi·ªáp v√† am hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m gi√†y d√©p v√† ph·ª• ki·ªán c·ªßa c·ª≠a h√†ng. B·∫°n c√≥ nhi·ªám v·ª• h·ªó tr·ª£ t·ªïng h·ª£p th√¥ng tin t·ª´ l·ªãch s·ª≠ tr√≤ chuy·ªán v·ªõi kh√°ch h√†ng ƒë·ªÉ chu·∫©n b·ªã cho vi·ªác t·∫°o ƒë∆°n h√†ng. H√£y ƒë·ªçc k·ªπ l·ªãch s·ª≠ tr√≤ chuy·ªán v√† tr√≠ch xu·∫•t c√°c th√¥ng tin sau n·∫øu c√≥:

            **Th√¥ng tin c·∫ßn tr√≠ch xu·∫•t:**

            * **T√™n kh√°ch h√†ng:** T√¨m ki·∫øm b·∫•t k·ª≥ th√¥ng tin n√†o ƒë·ªÅ c·∫≠p ƒë·∫øn t√™n c·ªßa kh√°ch h√†ng.
            * **ƒê·ªãa ch·ªâ giao h√†ng:** T√¨m ki·∫øm th√¥ng tin v·ªÅ ƒë·ªãa ch·ªâ m√† kh√°ch h√†ng mu·ªën nh·∫≠n h√†ng.
            * **S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá:** T√¨m ki·∫øm s·ªë ƒëi·ªán tho·∫°i m√† kh√°ch h√†ng ƒë√£ cung c·∫•p.
            * **S·∫£n ph·∫©m quan t√¢m/mu·ªën mua:** X√°c ƒë·ªãnh r√µ t√™n s·∫£n ph·∫©m, m√£ s·∫£n ph·∫©m (n·∫øu c√≥), s·ªë l∆∞·ª£ng, m√†u s·∫Øc, k√≠ch c·ª° ho·∫∑c b·∫•t k·ª≥ ƒë·∫∑c ƒëi·ªÉm c·ª• th·ªÉ n√†o kh√°c m√† kh√°ch h√†ng mu·ªën mua.
            * **C√°c y√™u c·∫ßu ƒë·∫∑c bi·ªát kh√°c:** Ghi nh·∫≠n b·∫•t k·ª≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát n√†o kh√°c c·ªßa kh√°ch h√†ng li√™n quan ƒë·∫øn ƒë∆°n h√†ng (v√≠ d·ª•: g√≥i qu√†, ghi ch√∫ ƒë·∫∑c bi·ªát).

            **L·ªãch s·ª≠ tr√≤ chuy·ªán:**
                {chat_history_store[ussid]}
            
            **H∆∞·ªõng d·∫´n:**
            1.  ƒê·ªçc k·ªπ to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë∆∞·ª£c cung c·∫•p.
            2.  T√¨m ki·∫øm v√† tr√≠ch xu·∫•t c√°c th√¥ng tin ƒë∆∞·ª£c li·ªát k√™ ·ªü tr√™n.
            3.  N·∫øu m·ªôt th√¥ng tin xu·∫•t hi·ªán nhi·ªÅu l·∫ßn ho·∫∑c ƒë∆∞·ª£c c·∫≠p nh·∫≠t, h√£y ∆∞u ti√™n th√¥ng tin m·ªõi nh·∫•t.
            4.  N·∫øu m·ªôt th√¥ng tin kh√¥ng c√≥ trong l·ªãch s·ª≠ tr√≤ chuy·ªán, h√£y b·ªè qua tr∆∞·ªùng ƒë√≥.
            5.  Tr√¨nh b√†y th√¥ng tin ƒë√£ tr√≠ch xu·∫•t m·ªôt c√°ch r√µ r√†ng v√† c√≥ c·∫•u tr√∫c.
            6.  G·ª≠i th√¥ng tin k√®m url="https://giaybq.com.vn/cart" ƒë·ªÉ kh√°ch h√†ng c√≥ th·ªÉ ƒëi·ªÅn th√¥ng tin thanh to√°n

            **ƒê·ªãnh d·∫°ng ƒë·∫ßu ra mong mu·ªën:**
            ```json
            {{
            "t√™n_kh√°ch_h√†ng": "{{t√™n kh√°ch h√†ng tr√≠ch xu·∫•t ƒë∆∞·ª£c}}",
            "ƒë·ªãa_ch·ªâ_giao_h√†ng": "{{ƒë·ªãa ch·ªâ giao h√†ng tr√≠ch xu·∫•t ƒë∆∞·ª£c}}",
            "s·ªë_ƒëi·ªán_tho·∫°i": "{{s·ªë ƒëi·ªán tho·∫°i tr√≠ch xu·∫•t ƒë∆∞·ª£c}}",
            "s·∫£n_ph·∫©m_mu·ªën_mua": [
                {{
                "t√™n_s·∫£n_ph·∫©m": "{{t√™n s·∫£n ph·∫©m 1}}",
                "m√£_s·∫£n_ph·∫©m": "{{m√£ s·∫£n ph·∫©m 1 (n·∫øu c√≥)}}",
                "s·ªë_l∆∞·ª£ng": "{{s·ªë l∆∞·ª£ng s·∫£n ph·∫©m 1}}",
                "m√†u_s·∫Øc": "{{m√†u s·∫Øc s·∫£n ph·∫©m 1 (n·∫øu c√≥)}}",
                "k√≠ch_c·ª°": "{{k√≠ch c·ª° s·∫£n ph·∫©m 1 (n·∫øu c√≥)}}",
                "ghi_ch√∫": "{{ghi ch√∫ kh√°c v·ªÅ s·∫£n ph·∫©m 1 (n·∫øu c√≥)}}"
                }},
                {{
                "t√™n_s·∫£n_ph·∫©m": "{{t√™n s·∫£n ph·∫©m 2}}",
                "m√£_s·∫£n_ph·∫©m": "{{m√£ s·∫£n ph·∫©m 2 (n·∫øu c√≥)}}",
                "s·ªë_l∆∞·ª£ng": "{{s·ªë l∆∞·ª£ng s·∫£n ph·∫©m 2}}",
                "m√†u_s·∫Øc": "{{m√†u s·∫Øc s·∫£n ph·∫©m 2 (n·∫øu c√≥)}}",
                "k√≠ch_c·ª°": "{{k√≠ch c·ª° s·∫£n ph·∫©m 2 (n·∫øu c√≥)}}",
                "ghi_ch√∫": "{{ghi ch√∫ kh√°c v·ªÅ s·∫£n ph·∫©m 2 (n·∫øu c√≥)}}"
                }}
            ],
            "y√™u_c·∫ßu_ƒë·∫∑c_bi·ªát": "{{c√°c y√™u c·∫ßu ƒë·∫∑c bi·ªát kh√°c (n·∫øu c√≥)}}"
            }}
        """

    elif intent==5:
        system_message = f"""
            B·∫°n l√† chatbot t·ª± ƒë·ªông c√≥ t√™n l√† Hunggg. B·∫°n l√† m·ªôt nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng chuy√™n nghi·ªáp v√† am hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m gi√†y d√©p v√† ph·ª• ki·ªán c·ªßa c·ª≠a h√†ng Gi√†y BQ. B·∫°n s·∫Ω s·ª≠ d·ª•ng th√¥ng tin ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch.

            **C√¢u h·ªèi c·ªßa kh√°ch h√†ng:**     
            {latest_query}

            1.  ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa kh√°ch h√†ng ƒë·ªÉ x√°c ƒë·ªãnh r·∫±ng h·ªç ƒëang mu·ªën ki·ªÉm tra th√¥ng tin ƒë∆°n h√†ng v√† c√≥ th·ªÉ cung c·∫•p s·ªë ƒëi·ªán tho·∫°i ho·∫∑c ƒë·ªÅ c·∫≠p ƒë·∫øn vi·ªác ki·ªÉm tra ƒë∆°n h√†ng.
            2.  Ch√†o h·ªèi kh√°ch h√†ng m·ªôt c√°ch l·ªãch s·ª± v√† th√¢n thi·ªán.
            3.  Th√¥ng b√°o cho kh√°ch h√†ng r·∫±ng h·ªç c√≥ th·ªÉ d·ªÖ d√†ng ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng c·ªßa m√¨nh th√¥ng qua li√™n k·∫øt tr√™n trang web c·ªßa c·ª≠a h√†ng.
            4.  Cung c·∫•p ƒë∆∞·ªùng d·∫´n (URL) ch√≠nh x√°c ƒë·∫øn trang ki·ªÉm tra ƒë∆°n h√†ng.
            5.  Khuy·∫øn kh√≠ch kh√°ch h√†ng s·ª≠ d·ª•ng li√™n k·∫øt n√†y ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v·ªÅ ƒë∆°n h√†ng c·ªßa h·ªç.
            6.  K·∫øt th√∫c b·∫±ng m·ªôt l·ªùi ch√∫c ho·∫∑c m·ªôt c√¢u h·ªèi g·ª£i √Ω n·∫øu h·ªç c·∫ßn th√™m s·ª± h·ªó tr·ª£ sau khi ki·ªÉm tra.

            **Th√¥ng tin li√™n k·∫øt ki·ªÉm tra ƒë∆°n h√†ng:**

            Trang web ki·ªÉm tra ƒë∆°n h√†ng: `https://giaybq.com.vn/pages/tra-cuu-don-hang-online`

            **V√≠ d·ª•:**

            * **Kh√°ch h√†ng:** "T√¥i mu·ªën ki·ªÉm tra ƒë∆°n h√†ng c·ªßa t√¥i v·ªõi s·ªë ƒëi·ªán tho·∫°i 090xxxxxxx."
                **B·∫°n (LLM):** "Ch√†o qu√Ω kh√°ch! ƒê·ªÉ ki·ªÉm tra th√¥ng tin chi ti·∫øt v·ªÅ ƒë∆°n h√†ng c·ªßa m√¨nh, qu√Ω kh√°ch vui l√≤ng truy c·∫≠p ƒë∆∞·ªùng d·∫´n sau: hung.com/kiem-tra-don-hang. Qu√Ω kh√°ch c√≥ th·ªÉ theo d√µi tr·∫°ng th√°i giao h√†ng v√† xem c√°c th√¥ng tin li√™n quan t·∫°i ƒë√≥. N·∫øu qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m sau khi ki·ªÉm tra, ƒë·ª´ng ng·∫ßn ng·∫°i cho ch√∫ng t√¥i bi·∫øt nh√©."

            * **Kh√°ch h√†ng:** "ƒê∆°n h√†ng c·ªßa t√¥i ƒë√£ giao ch∆∞a?"
                **B·∫°n (LLM):** "Ch√†o qu√Ω kh√°ch! Qu√Ω kh√°ch c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i giao h√†ng c·ªßa ƒë∆°n h√†ng m·ªôt c√°ch nhanh ch√≥ng t·∫°i trang web c·ªßa ch√∫ng t√¥i: hung.com/kiem-tra-don-hang. Xin qu√Ω kh√°ch vui l√≤ng truy c·∫≠p ƒë·ªÉ xem th√¥ng tin c·∫≠p nh·∫≠t nh·∫•t. N·∫øu c·∫ßn th√™m th√¥ng tin, xin vui l√≤ng cho ch√∫ng t√¥i bi·∫øt s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m√£ ƒë∆°n h√†ng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n."
        """


    full_chat_history = [{"role": "system", "content": system_message}] + chat_history_store[ussid]
    # print("üòí full_chat_history ", full_chat_history)

    try:
        # Calculate token count for the input messages
        input_token_count = calculate_token_count(full_chat_history)

        def generate_response():
            nonlocal input_token_count
            try:
                # Initialize Azure OpenAI client
                client = AzureOpenAI(
                    azure_endpoint=GPT4_ENDPOINT,
                    api_key=GPT4_API_KEY,
                    api_version=GPT4_API_VERSION,
                )

                # Call GPT-4 to generate the response
                response = client.chat.completions.create(
                    model=GPT4_DEPLOYMENT_NAME,
                    messages=full_chat_history,
                    max_tokens=2000,
                    temperature=0.7,
                    top_p=0.99,
                    frequency_penalty=0,
                    presence_penalty=0,
                    stop=None,
                    stream=True  # Enable streaming
                )

                collected_chunks = []
                output_token_count = 0
                for chunk in response:
                    if chunk.choices and hasattr(chunk.choices[0], "delta") and hasattr(chunk.choices[0].delta, "content"):
                        content = chunk.choices[0].delta.content
                        if content:
                            collected_chunks.append(content)
                            yield f"data: {json.dumps({'content': content})}\n\n"

                            # Incrementally calculate output token count
                            output_token_count += len(tiktoken.encoding_for_model("gpt-4").encode(content))

                # Combine all chunks into the final response
                full_response = "".join(collected_chunks)

                # Add the bot's response to the chat history
                chat_history_store[ussid].append({"role": "assistant", "content": full_response})

                # Log total token usage
                print(f"Input Tokens: {input_token_count}, Output Tokens: {output_token_count}")

            except Exception as e:
                yield f"data: {json.dumps({'error': str(e)})}\n\n"

        return Response(stream_with_context(generate_response()), mimetype="text/event-stream")

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)